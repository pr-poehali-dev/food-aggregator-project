import React, { useState, useMemo } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { toast } from '@/hooks/use-toast';
import Icon from '@/components/ui/icon';

const Index = () => {
  const [cartItems, setCartItems] = useState([
    { id: 1, name: '–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', price: 599, quantity: 1, restaurant: '–î–æ–¥–æ –ü–∏—Ü—Ü–∞', restaurantId: 1 },
    { id: 2, name: '–†–æ–ª–ª –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è', price: 320, quantity: 2, restaurant: '–°—É—à–∏ –ú–∞—Å—Ç–µ—Ä', restaurantId: 2 }
  ]);

  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedRestaurant, setSelectedRestaurant] = useState(null);
  const [showStoryModal, setShowStoryModal] = useState(false);
  const [currentStory, setCurrentStory] = useState(null);

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –º–µ–Ω—é
  const restaurantsData = [
    {
      id: 1,
      name: '–î–æ–¥–æ –ü–∏—Ü—Ü–∞',
      cuisine: '–ü–∏—Ü—Ü–∞, –ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è',
      rating: 4.5,
      deliveryTime: '25-35 –º–∏–Ω',
      deliveryPrice: 199,
      image: '/img/52e85de7-de44-41fd-bdab-b046fe969742.jpg',
      tags: ['–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ', '–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'],
      discount: '20% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑',
      category: 'pizza',
      menu: [
        { id: 1, name: '–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', price: 599, description: '–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, —Å—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –±–∞–∑–∏–ª–∏–∫', image: '/img/52e85de7-de44-41fd-bdab-b046fe969742.jpg' },
        { id: 2, name: '–ü–∏—Ü—Ü–∞ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏', price: 699, description: '–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, —Å—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –ø–µ–ø–ø–µ—Ä–æ–Ω–∏', image: '/img/52e85de7-de44-41fd-bdab-b046fe969742.jpg' },
        { id: 3, name: '–ü–∏—Ü—Ü–∞ 4 —Å—ã—Ä–∞', price: 799, description: '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞, –ø–∞—Ä–º–µ–∑–∞–Ω, –¥–æ—Ä –±–ª—é, —á–µ–¥–¥–µ—Ä', image: '/img/52e85de7-de44-41fd-bdab-b046fe969742.jpg' }
      ]
    },
    {
      id: 2,
      name: '–°—É—à–∏ –ú–∞—Å—Ç–µ—Ä',
      cuisine: '–°—É—à–∏, –Ø–ø–æ–Ω—Å–∫–∞—è',
      rating: 4.8,
      deliveryTime: '30-45 –º–∏–Ω',
      deliveryPrice: 0,
      image: '/img/7dbbd138-6551-482a-86cb-dba9978afc2f.jpg',
      tags: ['–ü—Ä–µ–º–∏—É–º', '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'],
      discount: null,
      category: 'sushi',
      menu: [
        { id: 4, name: '–†–æ–ª–ª –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è', price: 320, description: '–õ–æ—Å–æ—Å—å, –æ–≥—É—Ä–µ—Ü, —Å–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä', image: '/img/7dbbd138-6551-482a-86cb-dba9978afc2f.jpg' },
        { id: 5, name: '–†–æ–ª–ª –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è', price: 290, description: '–ö—Ä–∞–±, –∞–≤–æ–∫–∞–¥–æ, –æ–≥—É—Ä–µ—Ü, –∏–∫—Ä–∞ —Ç–æ–±–∏–∫–æ', image: '/img/7dbbd138-6551-482a-86cb-dba9978afc2f.jpg' },
        { id: 6, name: '–°–∞—à–∏–º–∏ –ª–æ—Å–æ—Å—å', price: 450, description: '–°–≤–µ–∂–∏–π –ª–æ—Å–æ—Å—å 6 –∫—É—Å–æ—á–∫–æ–≤', image: '/img/7dbbd138-6551-482a-86cb-dba9978afc2f.jpg' }
      ]
    },
    {
      id: 3,
      name: 'Burger Club',
      cuisine: '–ë—É—Ä–≥–µ—Ä—ã, –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è',
      rating: 4.3,
      deliveryTime: '20-30 –º–∏–Ω',
      deliveryPrice: 150,
      image: '/img/7ab6137d-97cc-45d5-9c86-7ee85524285b.jpg',
      tags: ['–ù–æ–≤–∏–Ω–∫–∞'],
      discount: '–°–∫–∏–¥–∫–∞ 15%',
      category: 'burgers',
      menu: [
        { id: 7, name: '–ß–∏–∑–±—É—Ä–≥–µ—Ä', price: 390, description: '–ì–æ–≤—è–∂—å—è –∫–æ—Ç–ª–µ—Ç–∞, —Å—ã—Ä —á–µ–¥–¥–µ—Ä, —Å–æ—É—Å', image: '/img/7ab6137d-97cc-45d5-9c86-7ee85524285b.jpg' },
        { id: 8, name: '–ë–∏–≥ –ë—É—Ä–≥–µ—Ä', price: 490, description: '–î–≤–æ–π–Ω–∞—è –∫–æ—Ç–ª–µ—Ç–∞, –±–µ–∫–æ–Ω, —Å—ã—Ä, –æ–≤–æ—â–∏', image: '/img/7ab6137d-97cc-45d5-9c86-7ee85524285b.jpg' },
        { id: 9, name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏', price: 150, description: '–•—Ä—É—Å—Ç—è—â–∏–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Å —Å–æ—É—Å–æ–º', image: '/img/7ab6137d-97cc-45d5-9c86-7ee85524285b.jpg' }
      ]
    }
  ];

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
  const filteredRestaurants = useMemo(() => {
    let filtered = restaurantsData;
    
    if (searchQuery) {
      filtered = filtered.filter(restaurant => 
        restaurant.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        restaurant.cuisine.toLowerCase().includes(searchQuery.toLowerCase()) ||
        restaurant.menu.some(item => 
          item.name.toLowerCase().includes(searchQuery.toLowerCase())
        )
      );
    }
    
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(restaurant => restaurant.category === selectedCategory);
    }
    
    return filtered;
  }, [searchQuery, selectedCategory]);

  const totalPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  const deliveryFee = 199;
  const finalPrice = totalPrice + deliveryFee;

  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
  const addToCart = (menuItem, restaurant) => {
    const existingItem = cartItems.find(item => item.id === menuItem.id);
    
    if (existingItem) {
      setCartItems(prev => 
        prev.map(item => 
          item.id === menuItem.id 
            ? { ...item, quantity: item.quantity + 1 }
            : item
        )
      );
    } else {
      setCartItems(prev => [...prev, {
        id: menuItem.id,
        name: menuItem.name,
        price: menuItem.price,
        quantity: 1,
        restaurant: restaurant.name,
        restaurantId: restaurant.id
      }]);
    }
    
    toast({
      title: '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É',
      description: `${menuItem.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`,
    });
  };

  const updateQuantity = (itemId, change) => {
    setCartItems(prev => 
      prev.map(item => {
        if (item.id === itemId) {
          const newQuantity = Math.max(0, item.quantity + change);
          return newQuantity === 0 ? null : { ...item, quantity: newQuantity };
        }
        return item;
      }).filter(Boolean)
    );
  };

  const removeFromCart = (itemId) => {
    setCartItems(prev => prev.filter(item => item.id !== itemId));
    toast({
      title: '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
      description: '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
    });
  };

  const clearCart = () => {
    setCartItems([]);
    toast({
      title: '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞',
      description: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
    });
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–æ—Ä–∏—Å
  const openStory = (story) => {
    setCurrentStory(story);
    setShowStoryModal(true);
  };

  const handleCategoryClick = (categoryKey) => {
    setSelectedCategory(categoryKey);
  };

  const categories = [
    { name: '–í—Å–µ', emoji: 'üçΩÔ∏è', count: restaurantsData.length, key: 'all' },
    { name: '–ü–∏—Ü—Ü–∞', emoji: 'üçï', count: restaurantsData.filter(r => r.category === 'pizza').length, key: 'pizza' },
    { name: '–°—É—à–∏', emoji: 'üç£', count: restaurantsData.filter(r => r.category === 'sushi').length, key: 'sushi' },
    { name: '–ë—É—Ä–≥–µ—Ä—ã', emoji: 'üçî', count: restaurantsData.filter(r => r.category === 'burgers').length, key: 'burgers' },
    { name: '–°–∞–ª–∞—Ç—ã', emoji: 'ü•ó', count: 0, key: 'salads' },
    { name: '–î–µ—Å–µ—Ä—Ç—ã', emoji: 'üç∞', count: 0, key: 'desserts' }
  ];

  const stories = [
    { id: 1, name: 'Dod–æ', avatar: 'üçï', active: true, content: '–ù–æ–≤–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç—Ä—é—Ñ–µ–ª—è–º–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è —Å–æ —Å–∫–∏–¥–∫–æ–π 25%' },
    { id: 2, name: '–°—É—à–∏', avatar: 'üç£', active: true, content: '–°–≤–µ–∂–∞—è —Ä—ã–±–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! –î–æ—Å—Ç–∞–≤–∫–∞ —Å—É—à–∏ –∑–∞ 30 –º–∏–Ω—É—Ç' },
    { id: 3, name: 'KFC', avatar: 'üçó', active: false, content: '–û—Å—Ç—Ä—ã–µ –∫—Ä—ã–ª—ã—à–∫–∏ –≤ –Ω–æ–≤–æ–º —Å–æ—É—Å–µ' },
    { id: 4, name: '–ú–∞–∫–¥–∞–∫', avatar: 'üçü', active: true, content: '–ë–∏–≥ –ú–∞–∫ + –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏ = 299‚ÇΩ –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏!' }
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <img 
                src="https://cdn.poehali.dev/files/f22d51be-4de6-4f55-b0ac-23d642ad8792.png" 
                alt="–ù–∞ –û–±–µ–¥" 
                className="h-10"
              />
              <div className="hidden md:flex items-center space-x-2 text-sm text-gray-600">
                <Icon name="MapPin" size={16} />
                <span>–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è 12</span>
              </div>
            </div>

            <div className="flex-1 max-w-md mx-8">
              <div className="relative">
                <Icon name="Search" size={20} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <Input
                  placeholder="–ü–æ–∏—Å–∫ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º, –∫—É—Ö–Ω–µ –∏–ª–∏ –±–ª—é–¥–∞–º"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>

            <div className="flex items-center space-x-4">
              <Button variant="ghost" size="sm">
                <Icon name="Heart" size={20} />
                <span className="hidden md:inline ml-2">–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</span>
              </Button>
              <Button variant="ghost" size="sm">
                <Icon name="User" size={20} />
                <span className="hidden md:inline ml-2">–í–æ–π—Ç–∏</span>
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 py-6">
        <div className="grid grid-cols-12 gap-6">
          {/* Left Sidebar - Profile */}
          <div className="col-span-12 lg:col-span-3">
            <Card className="sticky top-24">
              <CardHeader className="text-center">
                <Avatar className="w-16 h-16 mx-auto mb-3">
                  <AvatarFallback className="bg-orange-100 text-orange-600 text-lg font-semibold">
                    –°–¢
                  </AvatarFallback>
                </Avatar>
                <CardTitle className="text-lg">–°—Ç–∞—Å</CardTitle>
                <CardDescription>–ù–æ–≤–∏—á–æ–∫ –Ω–∞ 1 539 ‚ÇΩ</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-600">–ë–æ–Ω—É—Å—ã</span>
                  <span className="font-semibold">159 ‚ÇΩ</span>
                </div>
                <Button className="w-full bg-orange-500 hover:bg-orange-600">
                  <Icon name="Truck" size={16} className="mr-2" />
                  –î–æ—Å—Ç–∞–≤–∫–∞
                </Button>
                <Button variant="outline" className="w-full">
                  –°–∞–º–æ–≤—ã–≤–æ–∑
                </Button>
                <div className="pt-3 border-t">
                  <div className="space-y-2">
                    <div className="flex items-center space-x-2 text-sm">
                      <Icon name="MapPin" size={16} className="text-gray-400" />
                      <span>–ö–∏—Ä–æ–≤, 25–∞</span>
                    </div>
                    <div className="text-xs text-gray-500">
                      –†–∏–º—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Main Content */}
          <div className="col-span-12 lg:col-span-6">
            {/* Stories */}
            <div className="mb-6">
              <div className="flex space-x-4 pb-4 overflow-x-auto">
                {stories.map((story) => (
                  <div key={story.id} className="flex flex-col items-center space-y-2 min-w-0">
                    <div 
                      className={`w-16 h-16 rounded-full flex items-center justify-center text-2xl cursor-pointer hover-scale transition-all ${
                        story.active 
                          ? 'bg-gradient-to-r from-orange-400 to-orange-600 ring-2 ring-orange-300' 
                          : 'bg-gray-200'
                      }`}
                      onClick={() => story.active && openStory(story)}
                    >
                      {story.avatar}
                    </div>
                    <span className="text-xs font-medium text-center truncate w-16">
                      {story.name}
                    </span>
                  </div>
                ))}
              </div>
            </div>

            {/* Hero Banner */}
            <Card className="mb-6 bg-gradient-to-r from-orange-500 to-orange-600 text-white overflow-hidden">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <h2 className="text-2xl font-bold mb-2">‚ú® –ù–æ–≤–∏–Ω–∫–∏ –∏ —Å–∫–∏–¥–∫–∏</h2>
                    <p className="text-orange-100 mb-4">–û–ø–æ–≤–µ—â–∞—Ç—å –≤–∞—Å –æ –≤—ã–≥–æ–¥–Ω—ã—Ö –∞–∫—Ü–∏—è—Ö –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö?</p>
                    <div className="flex space-x-3">
                      <Button variant="secondary" size="sm">–î–∞</Button>
                      <Button variant="ghost" size="sm" className="text-white hover:text-orange-600">–ù–µ—Ç</Button>
                    </div>
                  </div>
                  <div className="text-6xl opacity-20">üçï</div>
                </div>
              </CardContent>
            </Card>

            {/* Categories */}
            <div className="mb-8">
              <h3 className="text-xl font-semibold mb-4">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                {categories.map((category) => (
                  <Card 
                    key={category.key} 
                    className={`cursor-pointer hover-scale transition-all duration-200 hover:shadow-md ${
                      selectedCategory === category.key ? 'ring-2 ring-orange-500 bg-orange-50' : ''
                    }`}
                    onClick={() => handleCategoryClick(category.key)}
                  >
                    <CardContent className="p-4 text-center">
                      <div className="text-3xl mb-2">{category.emoji}</div>
                      <h4 className="font-semibold">{category.name}</h4>
                      <p className="text-sm text-gray-500">{category.count} –∑–∞–≤–µ–¥–µ–Ω–∏–π</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>

            {/* Restaurants */}
            <div>
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-semibold">
                  {searchQuery ? `–ù–∞–π–¥–µ–Ω–æ ${filteredRestaurants.length} –∑–∞–≤–µ–¥–µ–Ω–∏–π` : `–í –ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫–µ ${filteredRestaurants.length} –∑–∞–≤–µ–¥–µ–Ω–∏—è`}
                </h3>
                <div className="flex space-x-2">
                  <Button 
                    variant={selectedCategory === 'all' ? 'default' : 'outline'} 
                    size="sm"
                    onClick={() => setSelectedCategory('all')}
                  >
                    <Icon name="Filter" size={16} className="mr-2" />
                    –í—Å–µ
                  </Button>
                  <Button variant="outline" size="sm">–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã</Button>
                  <Button variant="outline" size="sm">–†–µ—Å—Ç–æ—Ä–∞–Ω—ã</Button>
                </div>
              </div>

              {filteredRestaurants.length === 0 ? (
                <div className="text-center py-12">
                  <Icon name="Search" size={48} className="mx-auto text-gray-300 mb-4" />
                  <h4 className="text-lg font-semibold text-gray-600 mb-2">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h4>
                  <p className="text-gray-500">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {filteredRestaurants.map((restaurant) => (
                    <Dialog key={restaurant.id}>
                      <DialogTrigger asChild>
                        <Card className="hover:shadow-md transition-shadow cursor-pointer">
                          <CardContent className="p-0">
                            <div className="flex">
                              <div className="w-32 h-24 relative overflow-hidden rounded-l-lg">
                                <img 
                                  src={restaurant.image} 
                                  alt={restaurant.name}
                                  className="w-full h-full object-cover"
                                />
                                {restaurant.discount && (
                                  <Badge className="absolute top-2 left-2 bg-red-500 text-white text-xs">
                                    {restaurant.discount}
                                  </Badge>
                                )}
                              </div>
                              <div className="flex-1 p-4">
                                <div className="flex items-start justify-between mb-2">
                                  <div>
                                    <h4 className="font-semibold text-lg">{restaurant.name}</h4>
                                    <p className="text-gray-600 text-sm">{restaurant.cuisine}</p>
                                  </div>
                                  <div className="flex items-center space-x-1">
                                    <Icon name="Star" size={16} className="text-yellow-400 fill-current" />
                                    <span className="font-semibold">{restaurant.rating}</span>
                                  </div>
                                </div>
                                
                                <div className="flex items-center justify-between text-sm text-gray-600">
                                  <div className="flex items-center space-x-4">
                                    <div className="flex items-center space-x-1">
                                      <Icon name="Clock" size={14} />
                                      <span>{restaurant.deliveryTime}</span>
                                    </div>
                                    <div className="flex items-center space-x-1">
                                      <Icon name="Truck" size={14} />
                                      <span>{restaurant.deliveryPrice > 0 ? `${restaurant.deliveryPrice} ‚ÇΩ` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}</span>
                                    </div>
                                  </div>
                                  <div className="flex space-x-2">
                                    {restaurant.tags.map((tag) => (
                                      <Badge key={tag} variant="secondary" className="text-xs">
                                        {tag}
                                      </Badge>
                                    ))}
                                  </div>
                                </div>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      </DialogTrigger>
                      <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
                        <DialogHeader>
                          <DialogTitle className="flex items-center space-x-3">
                            <img src={restaurant.image} alt={restaurant.name} className="w-12 h-12 rounded-lg object-cover" />
                            <div>
                              <h3 className="text-xl font-bold">{restaurant.name}</h3>
                              <p className="text-sm text-gray-600">{restaurant.cuisine}</p>
                            </div>
                          </DialogTitle>
                          <DialogDescription>
                            <div className="flex items-center space-x-4 text-sm text-gray-600">
                              <div className="flex items-center space-x-1">
                                <Icon name="Star" size={14} className="text-yellow-400 fill-current" />
                                <span>{restaurant.rating}</span>
                              </div>
                              <div className="flex items-center space-x-1">
                                <Icon name="Clock" size={14} />
                                <span>{restaurant.deliveryTime}</span>
                              </div>
                              <div className="flex items-center space-x-1">
                                <Icon name="Truck" size={14} />
                                <span>{restaurant.deliveryPrice > 0 ? `${restaurant.deliveryPrice} ‚ÇΩ` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}</span>
                              </div>
                            </div>
                          </DialogDescription>
                        </DialogHeader>
                        
                        <div className="mt-6">
                          <h4 className="text-lg font-semibold mb-4">–ú–µ–Ω—é</h4>
                          <div className="grid gap-4">
                            {restaurant.menu.map((item) => (
                              <Card key={item.id} className="p-4">
                                <div className="flex items-center space-x-4">
                                  <img 
                                    src={item.image} 
                                    alt={item.name} 
                                    className="w-16 h-16 rounded-lg object-cover"
                                  />
                                  <div className="flex-1">
                                    <h5 className="font-semibold">{item.name}</h5>
                                    <p className="text-sm text-gray-600 mb-2">{item.description}</p>
                                    <div className="flex items-center justify-between">
                                      <span className="text-lg font-bold">{item.price} ‚ÇΩ</span>
                                      <Button 
                                        onClick={() => addToCart(item, restaurant)}
                                        className="bg-orange-500 hover:bg-orange-600"
                                      >
                                        <Icon name="Plus" size={16} className="mr-2" />
                                        –í –∫–æ—Ä–∑–∏–Ω—É
                                      </Button>
                                    </div>
                                  </div>
                                </div>
                              </Card>
                            ))}
                          </div>
                        </div>
                      </DialogContent>
                    </Dialog>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* Right Sidebar - Cart */}
          <div className="col-span-12 lg:col-span-3">
            <Card className="sticky top-24">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>–ö–æ—Ä–∑–∏–Ω–∞</span>
                  <Badge variant="secondary">{cartItems.length}</Badge>
                </CardTitle>
              </CardHeader>
              <CardContent>
                {cartItems.length > 0 ? (
                  <div className="space-y-4">
                    <div className="flex items-center justify-between mb-3">
                      <span className="text-sm text-gray-600">–¢–æ–≤–∞—Ä—ã</span>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={clearCart}
                        className="text-red-500 hover:text-red-700"
                      >
                        –û—á–∏—Å—Ç–∏—Ç—å
                      </Button>
                    </div>
                    
                    {cartItems.map((item) => (
                      <div key={item.id} className="flex items-start space-x-3 pb-3 border-b last:border-b-0">
                        <div className="flex-1">
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <h5 className="font-medium text-sm">{item.name}</h5>
                              <p className="text-xs text-gray-500">{item.restaurant}</p>
                            </div>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              onClick={() => removeFromCart(item.id)}
                              className="h-6 w-6 p-0 text-gray-400 hover:text-red-500"
                            >
                              <Icon name="X" size={14} />
                            </Button>
                          </div>
                          <div className="flex items-center justify-between mt-2">
                            <div className="flex items-center space-x-2">
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="h-6 w-6 p-0"
                                onClick={() => updateQuantity(item.id, -1)}
                              >
                                -
                              </Button>
                              <span className="text-sm font-medium w-8 text-center">{item.quantity}</span>
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="h-6 w-6 p-0"
                                onClick={() => updateQuantity(item.id, 1)}
                              >
                                +
                              </Button>
                            </div>
                            <span className="font-semibold text-sm">{item.price * item.quantity} ‚ÇΩ</span>
                          </div>
                        </div>
                      </div>
                    ))}
                    
                    <div className="pt-3 border-t space-y-3">
                      <div className="text-sm space-y-2">
                        <div className="flex justify-between">
                          <span className="text-gray-600">–¢–æ–≤–∞—Ä—ã:</span>
                          <span>{totalPrice} ‚ÇΩ</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">–î–æ—Å—Ç–∞–≤–∫–∞:</span>
                          <span>{deliveryFee} ‚ÇΩ</span>
                        </div>
                        <div className="flex justify-between font-semibold text-lg border-t pt-2">
                          <span>–ò—Ç–æ–≥–æ:</span>
                          <span>{finalPrice} ‚ÇΩ</span>
                        </div>
                      </div>
                      
                      <Button 
                        className="w-full bg-orange-500 hover:bg-orange-600"
                        disabled={totalPrice < 600}
                        onClick={() => {
                          toast({
                            title: '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!',
                            description: `–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ ${finalPrice} ‚ÇΩ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É`,
                          });
                        }}
                      >
                        {totalPrice < 600 
                          ? `–ú–∏–Ω–∏–º—É–º 600 ‚ÇΩ (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${600 - totalPrice} ‚ÇΩ)`
                          : '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'
                        }
                      </Button>
                    </div>

                    {totalPrice < 600 && (
                      <div className="text-xs text-amber-600 bg-amber-50 p-2 rounded">
                        <Icon name="AlertCircle" size={14} className="inline mr-1" />
                        –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ 600 ‚ÇΩ
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <Icon name="ShoppingCart" size={48} className="mx-auto text-gray-300 mb-3" />
                    <p className="text-gray-500">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
                    <p className="text-sm text-gray-400">–î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
      
      {/* Story Modal */}
      <Dialog open={showStoryModal} onOpenChange={setShowStoryModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center space-x-2">
              <span className="text-2xl">{currentStory?.avatar}</span>
              <span>{currentStory?.name}</span>
            </DialogTitle>
          </DialogHeader>
          <div className="py-4">
            <p className="text-gray-700">{currentStory?.content}</p>
          </div>
          <div className="flex space-x-3">
            <Button className="flex-1 bg-orange-500 hover:bg-orange-600">
              –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω
            </Button>
            <Button variant="outline" onClick={() => setShowStoryModal(false)}>
              –ó–∞–∫—Ä—ã—Ç—å
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default Index;